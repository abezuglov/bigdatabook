<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE html>

        <html xmlns="http://www.w3.org/1999/xhtml">
        <head>
          <title>Chapter 4</title>
          <link rel="stylesheet" href="styles/pygments.css" type="text/css" />
          <link rel="stylesheet" href="styles/softcover.css" type="text/css" />
          <link rel="stylesheet" href="styles/epub.css" type="text/css" />
          <link rel="stylesheet" href="styles/custom.css" type="text/css"/>
          <link rel="stylesheet" href="styles/custom_epub.css" type="text/css"/>
          <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="styles/page-template.xpgt" />
        </head>

        <body>
          
      <div id="cid19" class="chapter"><h1><a href="hadoop_optimized_fragment.xhtml#cid19" class="heading hyperref"><span class="number">Chapter 4 </span>Hadoop Optimizations</a></h1>
</div>
<div id="cid20" class="section"><h2><a href="hadoop_optimized_fragment.xhtml#cid20" class="heading hyperref"><span class="number">4.1 </span>Combiner</a></h2>
<p class="noindent">A brief analysis of the word count example in MapReduce can reveal at least one area where the computation can be optimized.<span class="intersentencespace"></span> For each word, the mapper issues tuples like ‘&lt;word,1&gt;’ that are transmitted (potentially over the network) to the reducers.<span class="intersentencespace"></span> As a matter of preprocessing, each node can aggregate the data output by the local mapper.<span class="intersentencespace"></span> This intermediate step between the mapper and reducer is what the combiner is doing.</p>
<p>Suppose the mapper output is a series of tuples: &lt;the,1&gt;, &lt;lock,1&gt;,&lt;the,1&gt;,&lt;series,1&gt;.<span class="intersentencespace"></span> Then the combiner puts together the counts for ‘the’ and issues &lt;the,2&gt;, &lt;lock,1&gt;,&lt;series,1&gt;.<span class="intersentencespace"></span> For the word count problem, the combiner can function identically to the reducer and so below is an illustration of its call:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> yarn jar /opt/hadoop/hadoop-streaming.jar <span class="se">\</span>
-files mapper.py,reducer.py <span class="se">\</span>
-mapper <span class="s1">'python mapper.py'</span> <span class="se">\</span>
-combiner <span class="s1">'python reducer.py'</span> <span class="se">\</span>
-reducer <span class="s1">'python reducer.py'</span> <span class="se">\</span>
-numReduceTasks <span class="m">1</span> <span class="se">\</span>
-input /texts/shakespeare.txt <span class="se">\</span>
-output wordcount
</pre></div></div>
<p>The figure below summarizes word count MapReduce with the combiner.<span class="intersentencespace"></span> The mapper outputs 927,614 key-value pairs that would normally be sent to the reducer(s).<span class="intersentencespace"></span> In this example, however, these pairs are preprocessed by the combiner that now outputs only 35,061 pairs, which is a substantial reduce in data volume (<span class="inline_math"><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax_SVG" id="MathJax-Element-1-Frame" tabindex="0" style="font-size: 100%; display: inline-block;"><img src="images/texmath/3d07a89786aaac7c3abb1df2f067b229d87bb2ab.png" alt="epub/OEBPS/images/texmath/3d07a89786aaac7c3abb1df2f067b229d87bb2ab" style="height:0.56559em; vertical-align:0.14781497400000002em;" /></span></span>1/30).<span class="intersentencespace"></span> Finally the reducer processes them and outputs 23,723 pairs, which indicates that most processing has been done by the combiners in parallel.<span class="intersentencespace"></span> Even though there was only a single reducer, it did not have to run through the heavy processing.</p>
<div class="graphics image"><img src="/images/figures/word_count_combiner.png" alt="/images/figures/word_count_combiner" /></div>
<div id="uid44" class="subsection"><h3><a href="hadoop_optimized_fragment.xhtml#uid44" class="heading hyperref"><span class="number">4.1.1 </span>Calculating Averages</a></h3>
<p class="noindent">Unfortunately, the combiner is not always identical to the reducer.<span class="intersentencespace"></span> Consider the case of calculating arithmetic averages of a series of numbers.<span class="intersentencespace"></span> Suppose that the mapper outputs the numbers, the reducer adds them up, and calculates the average.<span class="intersentencespace"></span> If the combiner jumps in and calculates the averages similar to the reducer, the final average might not be accurate, when the amount of data processed by the mappers vary in size.</p>
<p>One way to circumvent the issue is to make the combiner output the sum and count of processed key-values.<span class="intersentencespace"></span> The reducer then keeps adding up the numbers and counts and finally calculates the average correctly.<span class="intersentencespace"></span> Below is the code for mapper, combiner, and reducer working on calculating average of road and air temperature in Seattle:</p>
<p>Mapper:
</p><div class="code"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">','</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">'</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="s1">'</span><span class="o">%</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nb">float</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">5</span><span class="p">])))</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
</pre></div></div>
<p>Combiner:
</p><div class="code"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">sys</span>

<span class="n">cur_station</span> <span class="o">=</span> <span class="s2">""</span>
<span class="n">station_count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">sum_temps</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">'</span><span class="se">\t</span><span class="s1">'</span><span class="p">)</span>
        <span class="n">station</span><span class="p">,</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">float</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

        <span class="k">if</span> <span class="n">station</span> <span class="o">!=</span> <span class="n">cur_station</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">cur_station</span> <span class="o">!=</span> <span class="s2">""</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s2">"</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="s2">"</span><span class="o">%</span><span class="p">(</span><span class="n">cur_station</span><span class="p">,</span> <span class="n">sum_temps</span><span class="p">,</span> <span class="n">station_count</span><span class="p">))</span>
            <span class="n">cur_station</span> <span class="o">=</span> <span class="n">station</span>
            <span class="n">station_count</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="n">sum_temps</span> <span class="o">=</span> <span class="n">temp</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">station_count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">sum_temps</span> <span class="o">+=</span> <span class="n">temp</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
        
<span class="k">print</span><span class="p">(</span><span class="s2">"</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="s2">"</span><span class="o">%</span><span class="p">(</span><span class="n">cur_station</span><span class="p">,</span> <span class="n">sum_temps</span><span class="p">,</span> <span class="n">station_count</span><span class="p">))</span>
</pre></div></div>
<p>Reducer:
</p><div class="code"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">sys</span>

<span class="n">cur_station</span> <span class="o">=</span> <span class="s2">""</span>
<span class="n">station_count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">sum_temps</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">:</span>
    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">'</span><span class="se">\t</span><span class="s1">'</span><span class="p">)</span>
    <span class="n">station</span><span class="p">,</span> <span class="n">_sum_temps</span><span class="p">,</span> <span class="n">_station_count</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">float</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="nb">float</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
        
    <span class="k">if</span> <span class="n">station</span> <span class="o">!=</span> <span class="n">cur_station</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">cur_station</span> <span class="o">!=</span> <span class="s2">""</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s2">"</span><span class="si">%s</span><span class="se">\t</span><span class="si">%2.2f</span><span class="s2">"</span><span class="o">%</span><span class="p">(</span><span class="n">cur_station</span><span class="p">,</span> <span class="n">sum_temps</span><span class="o">/</span><span class="n">station_count</span><span class="p">))</span>
        <span class="n">cur_station</span> <span class="o">=</span> <span class="n">station</span>
        <span class="n">station_count</span> <span class="o">=</span> <span class="n">_station_count</span>
        <span class="n">sum_temps</span> <span class="o">=</span> <span class="n">_sum_temps</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">station_count</span> <span class="o">+=</span> <span class="n">_station_count</span>
        <span class="n">sum_temps</span> <span class="o">+=</span> <span class="n">_sum_temps</span>
        
<span class="k">print</span><span class="p">(</span><span class="s2">"</span><span class="si">%s</span><span class="se">\t</span><span class="si">%2.2f</span><span class="s2">"</span><span class="o">%</span><span class="p">(</span><span class="n">cur_station</span><span class="p">,</span> <span class="n">sum_temps</span><span class="o">/</span><span class="n">station_count</span><span class="p">))</span>
</pre></div></div>
<div class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> yarn jar /opt/hadoop/hadoop-streaming.jar <span class="se">\</span>
-files mapper.py,reducer.py,combiner.py <span class="se">\</span>
-mapper <span class="s1">'python mapper.py'</span> <span class="se">\</span>
-combiner <span class="s1">'python combiner.py'</span> <span class="se">\</span>
-reducer <span class="s1">'python reducer.py'</span> <span class="se">\</span>
-numReduceTasks <span class="m">1</span> <span class="se">\</span>
-input  road_weather_10000.csv <span class="se">\</span>
-output avg_temp
</pre></div></div>
<p>Similar to the previous case, the figure below demonstrates that the major chunk of work has been done by the combiner, that reduced the number of key-value pairs from close to 10,000<sup id="cha-4_footnote-ref-1" class="footnote"><a href="#cha-4_footnote-1">1</a></sup> to 15:</p>
<div class="graphics image"><img src="/images/figures/temp_avg_combiner.png" alt="/images/figures/temp_avg_combiner" /></div>
</div></div>
<div id="cid21" class="section"><h2><a href="hadoop_optimized_fragment.xhtml#cid21" class="heading hyperref"><span class="number">4.2 </span>Partitioner</a></h2>
<p class="noindent">The MapReduce examples above use the tab symbol to separate the key from value in the key-value pairs.<span class="intersentencespace"></span> In majority of those cases, the key is atomic, being a string or a number.<span class="intersentencespace"></span> Sometimes, however, the key is compound, containing two or more fields.<span class="intersentencespace"></span> For instance, when analyzing IPv4 addresses containing four octets, each octet may represent a separate field and the MapReduce task may need to process them separately.</p>
<div class="graphics image"><img src="/images/figures/partitioner_fail.png" alt="/images/figures/partitioner_fail" /></div>
<p>Another example was a table join from the previous chapter, where the components of the key were the county ID and file name.<span class="intersentencespace"></span> Besides, this MR join implementation would only work in case of a single reducer that severely limited its application for big datasets.<span class="intersentencespace"></span> Let us consider the limitation in more detail.<span class="intersentencespace"></span> In the original problem, there are two CSV files, representing DB tables that need to be joined by a common key <code>county_id</code>.<span class="intersentencespace"></span> The mapper issues pairs like <code>county_id file_name "other fields"</code>, the reducer scans through them and joins all records with identical ID, but different file names.<span class="intersentencespace"></span> In case of multiple reducers, there is always a chance that the data is not partitioned correctly.<span class="intersentencespace"></span> Two or more reducers can get pairs pertaining to the same county and the join will not produce correct results.<span class="intersentencespace"></span> To circumvent the issue, the key can get partitioned so that all county data gets to the same reducer.<span class="intersentencespace"></span> The code below illustrates the concept.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> yarn jar /opt/hadoop/hadoop-streaming.jar <span class="se">\</span>
-D mapreduce.map.output.key.field.separator<span class="o">=</span>. <span class="se">\</span>
-D stream.num.map.output.key.fields<span class="o">=</span><span class="m">2</span> <span class="se">\</span>
-D mapreduce.partition.keypartitioner.options<span class="o">=</span>-k1,1 <span class="se">\</span>
-files mapper.py,identity_mr.py <span class="se">\</span>
-mapper <span class="s1">'python mapper.py'</span> <span class="se">\</span>
-reducer <span class="s1">'python identity_mr.py'</span> <span class="se">\</span>
-numReduceTasks <span class="m">3</span> <span class="se">\</span>
-input IA_counties.csv,IA_counties_population.csv <span class="se">\</span>
-output table_join <span class="se">\</span>
-partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner
</pre></div></div>
<div class="graphics image"><img src="/images/figures/partitioner_success.png" alt="/images/figures/partitioner_success" /></div>
</div>
<div id="cid22" class="section"><h2><a href="hadoop_optimized_fragment.xhtml#cid22" class="heading hyperref"><span class="number">4.3 </span>Review Questions</a></h2>
<ul>
<li>Come up with a combiner for a MapReduce job that calculates the median of numbers
</li></ul>
</div>
<div id="cid23" class="section"><h2><a href="hadoop_optimized_fragment.xhtml#cid23" class="heading hyperref"><span class="number">4.4 </span>Exercises</a></h2>
<ol>
<li>Create a MapReduce job (mapper, reducer, and combiner) to calculate bigram frequencies in English.<span class="intersentencespace"></span>
</li>
<li>Create a MapReduce job (mapper, reducer, and combiner) to calculate word collocations (use two words) in English.<span class="intersentencespace"></span>
</li></ol>
</div>
<div id="cha-4_footnotes">
  <div class="footnotes">
    <div id="cha-4_footnote-1" class="footnote"><a class="footnote-link" href="#cha-4_footnote-ref-1">1.</a> Why is it 9999 and not 10000?<span class="intersentencespace"></span> The first row in the dataset is the description containing the field names that is skipped.</div>
  </div>
</div>
    
        </body>
        </html>